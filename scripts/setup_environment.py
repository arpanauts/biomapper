#!/usr/bin/env python3
"""
Interactive environment setup script for Biomapper.

This script helps users configure their environment variables and validates
the setup to prevent common configuration errors.
"""

import sys
import os
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from biomapper.core.standards.env_manager import EnvironmentManager
from biomapper.core.standards.env_validator import EnvironmentValidator


def main():
    """Main entry point for environment setup."""
    print("=" * 70)
    print("üöÄ BIOMAPPER ENVIRONMENT SETUP WIZARD")
    print("=" * 70)
    print()
    
    # Check for existing .env file
    env_file = Path("/home/ubuntu/biomapper/.env")
    if env_file.exists():
        print(f"Found existing environment file: {env_file}")
        response = input("Do you want to (V)alidate, (R)econfigure, or (Q)uit? [V/r/q]: ").strip().lower()
        
        if response == 'q':
            print("Setup cancelled.")
            return 0
        elif response == 'r':
            backup = input("Create backup of existing .env? [Y/n]: ").strip().lower()
            if backup != 'n':
                backup_path = env_file.with_suffix('.env.backup')
                env_file.rename(backup_path)
                print(f"‚úÖ Backup created: {backup_path}")
            setup_new_environment()
        else:  # Default to validate
            validate_existing_environment()
    else:
        print("No existing .env file found.")
        response = input("Would you like to create one? [Y/n]: ").strip().lower()
        if response != 'n':
            setup_new_environment()
        else:
            print("Setup cancelled.")
            return 0
    
    return 0


def setup_new_environment():
    """Guide user through creating a new .env file."""
    print("\n" + "=" * 70)
    print("üìù ENVIRONMENT CONFIGURATION")
    print("=" * 70)
    
    config_lines = []
    config_lines.append("# Biomapper Environment Configuration")
    config_lines.append(f"# Generated by setup_environment.py")
    config_lines.append("")
    
    # Google Drive Configuration
    print("\n1. GOOGLE DRIVE INTEGRATION (Optional)")
    print("-" * 40)
    print("   Used for automatic upload of results to Google Drive")
    
    use_gdrive = input("   Configure Google Drive integration? [y/N]: ").strip().lower()
    if use_gdrive == 'y':
        print("\n   To get credentials:")
        print("   1. Go to Google Cloud Console")
        print("   2. Create/select a project")
        print("   3. Enable Google Drive API")
        print("   4. Create a service account")
        print("   5. Download JSON credentials")
        
        creds_path = input("\n   Path to credentials JSON file: ").strip()
        if creds_path:
            creds_path = Path(creds_path).expanduser().resolve()
            if creds_path.exists():
                config_lines.append("# Google Drive Integration")
                config_lines.append(f"GOOGLE_APPLICATION_CREDENTIALS={creds_path}")
                print(f"   ‚úÖ Credentials file found: {creds_path}")
                
                # Get folder ID
                print("\n   To get folder ID:")
                print("   1. Open Google Drive")
                print("   2. Navigate to target folder")
                print("   3. Copy ID from URL: drive.google.com/drive/folders/[FOLDER_ID]")
                
                folder_id = input("\n   Google Drive folder ID [1oQ7CczccH2a6oYYFMo_sf8fXtxF8au_D]: ").strip()
                if not folder_id:
                    folder_id = "1oQ7CczccH2a6oYYFMo_sf8fXtxF8au_D"
                config_lines.append(f"GOOGLE_DRIVE_FOLDER_ID={folder_id}")
                config_lines.append("")
            else:
                print(f"   ‚ö†Ô∏è File not found: {creds_path}")
                print("   Skipping Google Drive configuration")
    
    # Data Directories
    print("\n2. DATA DIRECTORIES")
    print("-" * 40)
    
    data_dir = input("   Data directory [/procedure/data/local_data]: ").strip()
    if not data_dir:
        data_dir = "/procedure/data/local_data"
    config_lines.append("# File Paths")
    config_lines.append(f"BIOMAPPER_DATA_DIR={data_dir}")
    
    output_dir = input("   Output directory [/tmp/biomapper_results]: ").strip()
    if not output_dir:
        output_dir = "/tmp/biomapper_results"
    config_lines.append(f"BIOMAPPER_OUTPUT_DIR={output_dir}")
    config_lines.append("")
    
    # Database Configuration
    print("\n3. DATABASE CONFIGURATION")
    print("-" * 40)
    
    db_url = input("   Database URL [sqlite:///biomapper.db]: ").strip()
    if not db_url:
        db_url = "sqlite:///biomapper.db"
    config_lines.append("# Database")
    config_lines.append(f"DATABASE_URL={db_url}")
    config_lines.append("")
    
    # Logging Configuration
    print("\n4. LOGGING CONFIGURATION (Optional)")
    print("-" * 40)
    
    use_logging = input("   Configure logging? [y/N]: ").strip().lower()
    if use_logging == 'y':
        log_level = input("   Log level [INFO]: ").strip().upper()
        if not log_level:
            log_level = "INFO"
        config_lines.append("# Optional: Logging")
        config_lines.append(f"BIOMAPPER_LOG_LEVEL={log_level}")
        
        log_file = input("   Log file path [/tmp/biomapper.log]: ").strip()
        if not log_file:
            log_file = "/tmp/biomapper.log"
        config_lines.append(f"BIOMAPPER_LOG_FILE={log_file}")
        config_lines.append("")
    
    # Write configuration
    env_path = Path("/home/ubuntu/biomapper/.env")
    env_content = "\n".join(config_lines)
    
    print("\n" + "=" * 70)
    print("üìÑ CONFIGURATION PREVIEW")
    print("-" * 70)
    print(env_content)
    print("-" * 70)
    
    confirm = input("\nSave this configuration? [Y/n]: ").strip().lower()
    if confirm != 'n':
        env_path.write_text(env_content)
        print(f"‚úÖ Configuration saved to: {env_path}")
        
        # Validate the new configuration
        print("\n" + "=" * 70)
        print("üîç VALIDATING CONFIGURATION")
        print("-" * 70)
        validate_existing_environment()
    else:
        print("Configuration not saved.")


def validate_existing_environment():
    """Validate the existing environment configuration."""
    print("\nüîç Running environment validation...")
    print("-" * 70)
    
    # Generate and display validation report
    report = EnvironmentValidator.full_validation_report()
    print(report)
    
    # Check for critical issues
    env = EnvironmentManager()
    critical_features = []
    
    # Check if Google Drive is configured
    if os.getenv('GOOGLE_DRIVE_FOLDER_ID'):
        critical_features.append('google_drive')
    
    # Check if data paths are configured
    if os.getenv('BIOMAPPER_DATA_DIR') or os.getenv('BIOMAPPER_OUTPUT_DIR'):
        critical_features.append('data_paths')
    
    if critical_features:
        try:
            env.validate_requirements(critical_features)
            print("\n‚úÖ All critical features validated successfully!")
        except EnvironmentError as e:
            print(f"\n‚ö†Ô∏è Some features have configuration issues:")
            print(str(e))
            print("\nYou may want to reconfigure your environment.")
    
    # Offer to create missing directories
    data_dirs = env.get_data_directories()
    created_any = False
    for name, path in data_dirs.items():
        if not path.exists():
            response = input(f"\nCreate {name} directory at {path}? [Y/n]: ").strip().lower()
            if response != 'n':
                path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ Created: {path}")
                created_any = True
    
    if created_any:
        print("\n‚úÖ All directories created successfully!")
    
    print("\n" + "=" * 70)
    print("üéâ ENVIRONMENT SETUP COMPLETE")
    print("=" * 70)
    print("\nYou can now run biomapper with proper environment configuration!")
    print("\nUseful commands:")
    print("  poetry run biomapper health              # Check system health")
    print("  poetry run pytest tests/test_environment.py  # Test environment")
    print("  python scripts/setup_environment.py      # Re-run this setup")


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\nSetup interrupted by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {e}")
        sys.exit(1)