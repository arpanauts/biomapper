# Biomapper Restructure Architecture Configuration v2.0
# Enhanced based on Phase 0-1 results and best practices

# ============================================================================
# 1. CORE CONFIGURATION
# ============================================================================
version: "2.0"
project: "biomapper"
migration_phase: "3"  # Action Migration phase
baseline_actions: 37  # Actual count from Phase 0-1 report
created: "2025-01-16"
updated: "2025-01-16"

# Current state tracking (updated from Phase 0-1 report)
current_state:
  total_files: 586
  action_count: 37
  tests_consolidated: 57
  duplicate_lines_eliminated: 130000
  import_compatibility: "100%"
  breaking_changes: 0

# ============================================================================
# 2. PROTECTION RULES
# ============================================================================
protected_patterns:
  # Core infrastructure - NEVER TOUCH during migration
  critical_infrastructure:
    - "biomapper/core/strategy_actions/registry.py"      # 71 dependencies
    - "biomapper/core/minimal_strategy_service.py"       # 12 dependencies
    - "biomapper/core/strategy_actions/__init__.py"
    - "biomapper/core/strategy_actions/typed_base.py"
  
  # High-usage actions (based on YAML analysis) - Migrate with extreme care
  high_usage_actions:
    - "biomapper/core/strategy_actions/load_dataset_identifiers.py"  # 59 YAML refs
    - "biomapper/core/strategy_actions/export_dataset.py"            # 48 YAML refs
    - "biomapper/core/strategy_actions/calculate_set_overlap.py"     # 42 YAML refs
    - "biomapper/core/strategy_actions/filter_dataset.py"           # 31 YAML refs
    - "biomapper/core/strategy_actions/merge_datasets.py"           # 24 YAML refs
  
  # API integration points
  api_critical:
    - "biomapper-api/app/services/mapper_service.py"
    - "biomapper-api/app/services/background_executor.py"
    - "biomapper-api/app/main.py"
    - "biomapper-api/app/routers/*"
  
  # Entry points and CLIs
  entry_points:
    - "*/__main__.py"
    - "*/cli/*"
    - "*/main.py"
    - "biomapper_client/cli.py"
    - "biomapper_client/client.py"
  
  # Configuration and setup
  configuration:
    - "*/setup.py"
    - "*/pyproject.toml"
    - "*/poetry.lock"
    - ".github/workflows/*"
  
  # Documentation (ReadTheDocs)
  documentation:
    - "docs/source/conf.py"
    - "docs/Makefile"
    - "*/README.md"
    - "CHANGELOG.md"

# ============================================================================
# 3. MIGRATION STRATEGY  
# ============================================================================
restructure_targets:
  # New core structure
  new_core_structure:
    root: "biomapper_core/"
    actions: "biomapper_core/actions/"
    services: "biomapper_core/services/"
    standards: "biomapper_core/standards/"  # Keep existing
  
  # Action categorization for migration
  action_categories:
    base: "biomapper_core/actions/base/"        # Core classes, registry
    entities: "biomapper_core/actions/entities/" # Domain-specific
    io: "biomapper_core/actions/io/"             # Data loading/saving
    reports: "biomapper_core/actions/reports/"   # Report generation
    utils: "biomapper_core/actions/utils/"       # Processing utilities
  
  # Entity subcategories
  entity_subcategories:
    proteins: "biomapper_core/actions/entities/proteins/"
    metabolites: "biomapper_core/actions/entities/metabolites/"
    chemistry: "biomapper_core/actions/entities/chemistry/"
    genes: "biomapper_core/actions/entities/genes/"
    pathways: "biomapper_core/actions/entities/pathways/"

# Migration priority (data-driven from YAML usage analysis)
action_migration_priority:
  phase_1_critical:
    - name: "load_dataset_identifiers.py"
      yaml_refs: 59
      category: "io"
      risk_level: "high"
    - name: "export_dataset.py"
      yaml_refs: 48
      category: "io"
      risk_level: "high"
    - name: "calculate_set_overlap.py"
      yaml_refs: 42
      category: "utils"
      risk_level: "high"
    - name: "filter_dataset.py"
      yaml_refs: 31
      category: "utils"
      risk_level: "medium"
    - name: "merge_datasets.py"
      yaml_refs: 24
      category: "utils"
      risk_level: "medium"
  
  phase_2_standard:
    - pattern: "proteins/*"
      target: "entities/proteins/"
      risk_level: "low"
    - pattern: "metabolites/*"
      target: "entities/metabolites/"
      risk_level: "low"
    - pattern: "chemistry/*"
      target: "entities/chemistry/"
      risk_level: "low"
  
  phase_3_remaining:
    - pattern: "generate_*"
      target: "reports/"
      risk_level: "low"
    - pattern: "*_utils.py"
      target: "utils/"
      risk_level: "low"

# Package restructure (with symlinks during transition)
package_restructure:
  renames:
    - old_path: "biomapper-api"
      new_path: "biomapper/api"
      symlink_duration: "30_days"
      validation_required: true
    - old_path: "biomapper_client"  
      new_path: "biomapper/client"
      symlink_duration: "30_days"
      validation_required: true

# ============================================================================
# 4. VALIDATION & MONITORING
# ============================================================================
validation_strategy:
  continuous:
    enabled: true
    interval: "after_each_file"
    failure_action: "abort"
  
  checkpoints:
    registry_integrity:
      id: "action_registry_count"
      type: "count_validation"
      baseline_source: "migration-baseline.json"
      command: "python3 -c 'from biomapper.core.strategy_actions.registry import ACTION_REGISTRY; assert len(set(ACTION_REGISTRY.keys())) >= 37'"
      description: "Verify all actions maintained (accounting for cosmetic duplicates)"
      failure_action: "abort"
    
    yaml_compatibility:
      id: "yaml_strategies"
      type: "strategy_validation"
      command: "poetry run biomapper validate --all-strategies"
      description: "Verify all 91 YAML action types work"
      failure_action: "abort"
    
    api_health:
      id: "api_service"
      type: "health_check"
      command: "curl -s localhost:8000/api/health/status | grep -q healthy || echo 'API not running (expected during dev)'"
      description: "API remains functional when running"
      failure_action: "warn"
    
    import_compatibility:
      id: "dual_imports"
      type: "import_test"
      test_imports:
        - "from biomapper.core.strategy_actions.registry import ACTION_REGISTRY"
        - "from biomapper.core.minimal_strategy_service import MinimalStrategyService"
        - "from biomapper_core.actions import ACTION_REGISTRY as NEW_REG"
        - "from biomapper_core.services import MinimalStrategyService as NEW_SVC"
      description: "Both old and new import paths work"
      failure_action: "abort"
    
    test_suite:
      id: "integration_tests"
      type: "test_execution"
      command: "poetry run pytest tests/integration/ -x --tb=short"
      description: "Integration tests pass"
      failure_action: "abort"

# Performance monitoring
performance_benchmarks:
  action_registration_time:
    baseline_ms: 500
    threshold_ms: 1000
    measurement: "registry load time"
  
  strategy_load_time:
    baseline_ms: 200
    threshold_ms: 500
    measurement: "YAML strategy parsing"
  
  test_execution:
    baseline_sec: 30
    threshold_sec: 60
    measurement: "integration test suite"

# ============================================================================
# 5. ENHANCED AUTOMATION
# ============================================================================
automation_scripts:
  phase_3:
    script: "scripts/migrate_phase_3.sh"
    rollback: "scripts/rollback_phase_3.sh"
    validation: "scripts/validate_phase_3.sh"
    monitoring: "scripts/monitor_migration.sh"
  
  validation:
    pre_migration: "scripts/pre_migration_check.sh"
    post_step: "scripts/validate_step.sh"
    final: "scripts/final_validation.sh"

# Dynamic import detection (enhanced)
dynamic_import_indicators:
  direct_imports:
    - "importlib"
    - "__import__"
    - "exec("
    - "eval("
    - "compile("
  
  indirect_patterns:
    - "getattr("
    - "globals()"
    - "locals()"
    - "vars("
    - "__dict__"
    - "pkgutil.iter_modules"
    - "inspect.getmembers"
    - "sys.modules"

# Critical dependency mapping
critical_dependencies:
  "biomapper/core/strategy_actions/registry.py":
    dependent_files: 71
    external_deps: ["typing", "logging"]
    breaking_change_risk: "critical"
    validation_required: true
  
  "biomapper/core/minimal_strategy_service.py":
    dependent_files: 12
    external_deps: ["typing", "pathlib", "logging"]
    breaking_change_risk: "high"
    validation_required: true

# ============================================================================
# 6. SUCCESS METRICS & TRACKING
# ============================================================================
success_metrics:
  quantitative_targets:
    file_reduction:
      baseline: 586
      target: 200
      current: 586
      reduction_percent: 66
    
    action_count:
      baseline: 37
      target: 37
      current: 37
      tolerance: 0
    
    duplicate_elimination:
      baseline: 130000
      target: 0
      current: 0  # Completed in Phase 0-1
      reduction_percent: 100
    
    test_consolidation:
      baseline: 57
      target: 0
      current: 0  # Completed in Phase 0-1
      consolidation_percent: 100
    
    dependency_reduction:
      baseline: 283
      target: 50
      current: 283
      reduction_percent: 80
  
  qualitative_indicators:
    - name: "All actions remain registered"
      status: "achieved"
      phase: "0-1"
    - name: "All YAML strategies work unchanged"
      status: "maintained"
      phase: "0-1"
    - name: "Zero API downtime during migration"
      status: "ongoing"
      phase: "3+"
    - name: "No breaking changes for external users"
      status: "maintained"
      phase: "0-1"
    - name: "Improved developer navigation experience"
      status: "pending"
      phase: "3+"

# Progress tracking
progress_tracking:
  phases_completed: ["0", "1", "2"]
  current_phase: "3"
  completion_percentage: 60
  estimated_completion: "2025-01-23"

# ============================================================================
# 7. ROLLBACK & RECOVERY
# ============================================================================
rollback_preparation:
  git_strategy:
    tags:
      - "pre-restructure-baseline"         # Phase 0 start
      - "pre-phase-1-cleanup"             # Before cleanup
      - "pre-phase-2-compatibility"       # Before compatibility layer
      - "pre-phase-3-actions"            # Before action migration
    
    branches:
      - "restructure-zero-downtime"       # Main migration branch
      - "restructure-backup-main"         # Extra backup
      - "restructure-backup-1"           # Rolling backup
  
  critical_file_backups:
    - source: "biomapper/core/strategy_actions/registry.py"
      backup: "backups/phase_3/registry.py.bak"
    - source: "biomapper/core/minimal_strategy_service.py"
      backup: "backups/phase_3/strategy_service.py.bak"
    - source: "pyproject.toml"
      backup: "backups/phase_3/pyproject.toml.bak"
  
  rollback_procedures:
    emergency:
      command: "./scripts/emergency_rollback.sh"
      description: "Complete rollback to pre-restructure state"
      recovery_time: "< 5 minutes"
    
    partial:
      registry_only: "git checkout HEAD~1 -- biomapper/core/strategy_actions/registry.py"
      service_only: "git checkout HEAD~1 -- biomapper/core/minimal_strategy_service.py"
      full_phase: "git checkout pre-phase-3-actions"
    
    forward_recovery:
      validation_fix: "scripts/fix_validation_errors.sh"
      registry_rebuild: "scripts/rebuild_registry.sh"
      import_fix: "scripts/fix_imports.sh"

# Symlink strategy during transition
symlink_management:
  duration_days: 30
  validation_interval: "weekly"
  cleanup_command: "scripts/cleanup_symlinks.sh"
  
# ============================================================================
# 8. NOTIFICATIONS & REPORTING
# ============================================================================
notification_hooks:
  phase_completion:
    slack_webhook: "${SLACK_WEBHOOK_URL}"
    email_list: "${MIGRATION_TEAM_EMAIL}"
    message_template: "✅ Phase {phase} completed successfully. {summary}"
  
  error_alerts:
    immediate: true
    channels: ["slack", "email"]
    escalation_threshold: "3_failures"

reporting:
  formats: ["console", "json", "html"]
  output_dir: "migration_reports/"
  include_timestamps: true
  include_git_info: true
  
  report_sections:
    - "progress_summary"
    - "validation_results"
    - "performance_metrics"
    - "risk_assessment"
    - "next_steps"

# ============================================================================
# 9. ENVIRONMENT-SPECIFIC SETTINGS
# ============================================================================
environments:
  development:
    validation_strictness: "high"
    auto_rollback: true
    performance_monitoring: true
  
  staging:
    validation_strictness: "maximum"
    auto_rollback: false
    performance_monitoring: true
    external_validation: true
  
  production:
    validation_strictness: "maximum"
    auto_rollback: false
    performance_monitoring: true
    external_validation: true
    approval_required: true

# ============================================================================
# 10. VERSION CONTROL INTEGRATION
# ============================================================================
pre_commit_hooks:
  enabled: true
  hooks:
    - id: "validate_action_count"
      command: "scripts/check_action_count.sh"
    - id: "check_import_compatibility"
      command: "scripts/check_imports.sh"
    - id: "prevent_protected_deletion"
      command: "scripts/check_protected_files.sh"
    - id: "validate_yaml_strategies"
      command: "scripts/check_yaml_compatibility.sh"

commit_message_templates:
  phase_completion: "feat(restructure): complete Phase {phase} - {description}"
  rollback: "fix(restructure): rollback Phase {phase} due to {reason}"
  validation_fix: "fix(restructure): resolve {validation_type} validation errors"

# Migration metadata
metadata:
  created_by: "biomapper_restructure_team"
  methodology: "zero_downtime_migration"
  safety_level: "maximum"
  compatibility_guarantee: "100%"
  estimated_duration: "14_days"
  actual_duration: "ongoing"