# Strategy: Map Arivale proteomics to KG2c proteins via UniProt IDs
# Author: BiomapperStrategyAssistant
# Date: 2025-08-06
# Expected match rate: 80-90% (depends on UniProt coverage in KG2c)

name: ARIVALE_TO_KG2C_PROTEINS
description: "Map Arivale proteomics data to KG2c proteins using UniProt identifiers"
version: "1.0.0"

# Parameters that can be overridden
parameters:
  # Input file paths
  arivale_file: "/procedure/data/local_data/MAPPING_ONTOLOGIES/arivale/proteomics_metadata.tsv"
  kg2c_file: "/procedure/data/local_data/MAPPING_ONTOLOGIES/kg2.10.2c_ontologies/kg2c_proteins.csv"
  
  # Output configuration
  output_dir: "/home/ubuntu/biomapper/data/results/arivale_kg2c_proteins"
  
  # Matching configuration
  min_confidence: 0.90
  include_obsolete: false
  batch_size: 1000

steps:
  # ===== Phase 1: Data Loading and Validation =====
  - name: load_arivale_proteins
    description: "Load Arivale proteomics metadata with UniProt IDs"
    action:
      type: LOAD_DATASET_IDENTIFIERS
      params:
        file_path: "${parameters.arivale_file}"
        identifier_column: "uniprot"
        additional_columns:
          - "name"
          - "panel"
          - "gene_name"
          - "gene_description"
          - "gene_id"
          - "transcript_id"
          - "protein_id"
        output_key: "arivale_proteins"
        drop_empty: true
        validate_types: true
    metrics:
      - total_rows_loaded
      - valid_uniprot_ids
      - missing_values

  - name: load_kg2c_proteins
    description: "Load KG2c protein dataset"
    action:
      type: LOAD_DATASET_IDENTIFIERS
      params:
        file_path: "${parameters.kg2c_file}"
        identifier_column: "xrefs"
        additional_columns:
          - "id"
          - "name"
          - "category"
          - "description"
          - "synonyms"
        output_key: "kg2c_proteins"
        drop_empty: true
        validate_types: true
    metrics:
      - total_rows_loaded
      - rows_with_uniprot_refs

  # ===== Phase 2: UniProt ID Extraction and Normalization =====
  - name: extract_kg2c_uniprot
    description: "Extract UniProt IDs from KG2c xrefs column"
    action:
      type: CUSTOM_TRANSFORM
      params:
        input_key: "kg2c_proteins"
        output_key: "kg2c_uniprot_extracted"
        transformation: |
          # Extract UniProtKB identifiers from xrefs column
          import pandas as pd
          import re
          
          df = context['datasets']['kg2c_proteins']
          
          def extract_uniprot(xrefs):
              if pd.isna(xrefs):
                  return None
              # Extract all UniProtKB:XXXXX patterns
              matches = re.findall(r'UniProtKB:([A-Z0-9]+)', str(xrefs))
              return matches[0] if matches else None
          
          df['uniprot_id'] = df['xrefs'].apply(extract_uniprot)
          df['has_uniprot'] = df['uniprot_id'].notna()
          
          # Store mapping for later use
          uniprot_to_kg2c = df[df['has_uniprot']].set_index('uniprot_id')[['id', 'name', 'description']].to_dict('index')
          context['metadata']['uniprot_to_kg2c'] = uniprot_to_kg2c
          
          return df[df['has_uniprot']]
    metrics:
      - total_kg2c_proteins
      - proteins_with_uniprot
      - unique_uniprot_ids

  - name: normalize_arivale_uniprot
    description: "Normalize and validate Arivale UniProt IDs"
    action:
      type: CUSTOM_TRANSFORM
      params:
        input_key: "arivale_proteins"
        output_key: "arivale_normalized"
        transformation: |
          import pandas as pd
          import re
          
          df = context['datasets']['arivale_proteins']
          
          def normalize_uniprot(uniprot_id):
              if pd.isna(uniprot_id):
                  return None
              # Remove any whitespace and convert to uppercase
              normalized = str(uniprot_id).strip().upper()
              # Validate UniProt format (basic check)
              if re.match(r'^[A-Z][0-9][A-Z0-9]{3}[0-9]$|^[A-Z][0-9][A-Z0-9]{3}[0-9]-\d+$', normalized):
                  return normalized.split('-')[0]  # Remove isoform suffix if present
              return normalized if normalized else None
          
          df['uniprot_normalized'] = df['uniprot'].apply(normalize_uniprot)
          df['is_valid_uniprot'] = df['uniprot_normalized'].notna()
          
          return df
    metrics:
      - total_arivale_proteins
      - valid_uniprot_format
      - invalid_uniprot_format

  # ===== Phase 3: Direct UniProt Matching =====
  - name: match_uniprot_ids
    description: "Match Arivale and KG2c proteins by UniProt ID"
    action:
      type: MERGE_DATASETS
      params:
        left_dataset_key: "arivale_normalized"
        right_dataset_key: "kg2c_uniprot_extracted"
        left_on: "uniprot_normalized"
        right_on: "uniprot_id"
        how: "inner"
        output_key: "matched_proteins"
        suffixes:
          left: "_arivale"
          right: "_kg2c"
    metrics:
      - total_matches
      - match_rate
      - unique_arivale_matched
      - unique_kg2c_matched

  # ===== Phase 4: Handle Unmatched Proteins =====
  - name: identify_unmatched_arivale
    description: "Identify Arivale proteins without KG2c matches"
    action:
      type: FILTER_DATASET
      params:
        input_key: "arivale_normalized"
        output_key: "unmatched_arivale"
        filter_criteria:
          - field: "uniprot_normalized"
            operator: "not_in"
            value_source: "matched_proteins.uniprot_normalized"
    metrics:
      - total_unmatched
      - unmatched_rate

  - name: attempt_uniprot_resolution
    description: "Try to resolve unmatched proteins via UniProt API"
    action:
      type: MERGE_WITH_UNIPROT_RESOLUTION
      params:
        input_key: "unmatched_arivale"
        identifier_column: "uniprot_normalized"
        output_key: "resolved_proteins"
        include_obsolete: "${parameters.include_obsolete}"
        batch_size: "${parameters.batch_size}"
        resolution_fields:
          - "accession"
          - "id"
          - "gene_names"
          - "organism_name"
          - "protein_name"
    metrics:
      - attempted_resolutions
      - successful_resolutions
      - obsolete_entries
      - api_errors

  # ===== Phase 5: Secondary Matching with Resolved IDs =====
  - name: match_resolved_proteins
    description: "Match resolved proteins with KG2c"
    action:
      type: MERGE_DATASETS
      params:
        left_dataset_key: "resolved_proteins"
        right_dataset_key: "kg2c_uniprot_extracted"
        left_on: "resolved_accession"
        right_on: "uniprot_id"
        how: "inner"
        output_key: "secondary_matches"
        suffixes:
          left: "_resolved"
          right: "_kg2c"
    metrics:
      - secondary_matches
      - secondary_match_rate

  # ===== Phase 6: Combine All Matches =====
  - name: combine_all_matches
    description: "Combine primary and secondary matches"
    action:
      type: MERGE_DATASETS
      params:
        left_dataset_key: "matched_proteins"
        right_dataset_key: "secondary_matches"
        how: "outer"
        output_key: "all_matches"
        combine_duplicates: true
    metrics:
      - total_combined_matches
      - duplicate_matches_removed

  # ===== Phase 7: Calculate Statistics =====
  - name: calculate_mapping_statistics
    description: "Calculate comprehensive mapping statistics"
    action:
      type: CALCULATE_SET_OVERLAP
      params:
        dataset1_key: "arivale_normalized"
        dataset2_key: "kg2c_uniprot_extracted"
        id_column1: "uniprot_normalized"
        id_column2: "uniprot_id"
        output_key: "mapping_statistics"
    metrics:
      - jaccard_similarity
      - overlap_coefficient
      - dataset1_coverage
      - dataset2_coverage

  # ===== Phase 8: Export Results =====
  - name: export_matched_proteins
    description: "Export matched protein pairs"
    action:
      type: EXPORT_DATASET
      params:
        dataset_key: "all_matches"
        output_path: "${parameters.output_dir}/arivale_kg2c_matched.tsv"
        format: "tsv"
        include_metadata: true
    metrics:
      - rows_exported
      - file_size

  - name: export_unmatched_proteins
    description: "Export unmatched Arivale proteins for review"
    action:
      type: EXPORT_DATASET
      params:
        dataset_key: "unmatched_arivale"
        output_path: "${parameters.output_dir}/arivale_unmatched.tsv"
        format: "tsv"
        include_metadata: true
    metrics:
      - unmatched_exported

  - name: export_statistics
    description: "Export mapping statistics"
    action:
      type: EXPORT_DATASET
      params:
        dataset_key: "mapping_statistics"
        output_path: "${parameters.output_dir}/mapping_statistics.json"
        format: "json"
        include_metadata: true
    metrics:
      - statistics_exported

  - name: generate_summary_report
    description: "Generate comprehensive mapping report"
    action:
      type: GENERATE_REPORT
      params:
        template: "protein_mapping"
        output_path: "${parameters.output_dir}/mapping_report.html"
        include_sections:
          - overview
          - match_statistics
          - unmatched_analysis
          - quality_metrics
        data_sources:
          - "all_matches"
          - "unmatched_arivale"
          - "mapping_statistics"
    metrics:
      - report_generated

# Final validation and checkpointing
validation:
  - check: "match_rate >= 0.70"
    message: "Warning: Match rate below 70%"
  - check: "api_errors < 100"
    message: "Warning: High number of API errors"
  
checkpointing:
  enabled: true
  frequency: "after_each_phase"
  cleanup_on_success: false