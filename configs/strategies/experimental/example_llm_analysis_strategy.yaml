name: EXAMPLE_LLM_ANALYSIS_STRATEGY
description: "Example strategy demonstrating LLM-powered analysis generation from progressive mapping results"

parameters:
  # Input data configuration
  input_file: "${BIOMAPPER_DATA_DIR}/sample_proteins.tsv"
  output_dir: "${BIOMAPPER_OUTPUT_DIR:-/tmp/biomapper_results}"
  
  # LLM configuration
  llm_provider: "${LLM_PROVIDER:-openai}"
  llm_model: "${LLM_MODEL:-gpt-4}"
  analysis_types: ["summary", "flowchart"]
  
  # Analysis customization
  entity_type: "protein"
  biological_context: "Sample proteomics dataset for LLM analysis demonstration"

steps:
  # Stage 1: Load input data
  - name: load_sample_data
    action:
      type: LOAD_DATASET_IDENTIFIERS
      params:
        file_path: "${parameters.input_file}"
        identifier_column: "protein_id"
        output_key: "input_proteins"
        
  # Stage 2: Perform progressive mapping (simplified for demo)
  - name: direct_mapping
    action:
      type: MERGE_WITH_UNIPROT_RESOLUTION
      params:
        input_key: "input_proteins"
        output_key: "mapped_proteins"
        
  # Stage 3: Calculate mapping statistics
  - name: calculate_overlap
    action:
      type: CALCULATE_SET_OVERLAP
      params:
        input_key: "mapped_proteins"
        output_key: "mapping_stats"
        
  # Stage 4: Generate LLM analysis (main demonstration)
  - name: generate_llm_analysis
    action:
      type: GENERATE_LLM_ANALYSIS
      params:
        provider: "${parameters.llm_provider}"
        model: "${parameters.llm_model}"
        output_format: "${parameters.analysis_types}"
        include_recommendations: true
        output_directory: "${parameters.output_dir}/llm_analysis"
        
        # Analysis configuration
        entity_type: "${parameters.entity_type}"
        strategy_name: "Example LLM Analysis Strategy"
        analysis_focus: ["performance", "quality", "edge_cases"]
        biological_context: "${parameters.biological_context}"
        
        # Fallback providers for robustness
        fallback_providers: ["anthropic", "gemini"]
        
        # Data source keys (following 2025 parameter naming standards)
        progressive_stats_key: "mapping_stats"
        mapping_results_key: "mapped_proteins"
        
  # Stage 5: Export final results
  - name: export_results
    action:
      type: EXPORT_DATASET
      params:
        input_key: "mapped_proteins"
        output_path: "${parameters.output_dir}/final_results.tsv"
        format: "tsv"