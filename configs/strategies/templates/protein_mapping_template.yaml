# Protein Mapping Strategy Template
# Instructions: Copy this template and fill in the specific values for your mapping

metadata:
  # Identity (all required - update these)
  id: "prot_SOURCE_to_TARGET_BRIDGE_v1_base"  # Follow naming convention
  name: "SOURCE Proteins to TARGET via BRIDGE"
  version: "1.0.0"
  created: "YYYY-MM-DD"
  author: "your-name"
  entity_type: "proteins"
  source_dataset: "SOURCE_CODE"  # arv|ukb|isr|fnh|osp
  target_dataset: "TARGET_CODE"  # kg2c|spoke|unified
  bridge_type: ["BRIDGE_TYPE"]   # uniprot|ensembl|refseq|multi
  
  # Quality tracking (required)
  quality_tier: "experimental"  # Start here, promote later
  validation_status: "pending"
  expected_match_rate: 0.85     # Proteins typically 80-95%
  actual_match_rate: null       # Fill after testing
  
  # Data tracking (required - update paths)
  source_files:
    - path: "/procedure/data/local_data/MAPPING_ONTOLOGIES/SOURCE/FILE.tsv"
      last_updated: "YYYY-MM-DD"
      row_count: null  # Fill with actual count
  target_files:
    - path: "/procedure/data/local_data/MAPPING_ONTOLOGIES/TARGET/FILE.csv"
      last_updated: "YYYY-MM-DD"
      row_count: null
  
  # Optional but recommended
  description: "Maps SOURCE protein data to TARGET ontology using BRIDGE identifiers"
  tags: ["proteins", "BRIDGE", "SOURCE", "TARGET"]
  dependencies: []
  supersedes: null
  citation: null

# Runtime parameters
parameters:
  output_dir: "${OUTPUT_DIR:-/tmp/biomapper/outputs}"
  min_confidence: 0.8
  enable_fuzzy_matching: false
  batch_size: 100
  max_retries: 3

# Strategy implementation
steps:
  # Step 1: Load source data
  - name: load_source_proteins
    action:
      type: LOAD_DATASET_IDENTIFIERS
      params:
        file_path: "${metadata.source_files[0].path}"
        identifier_column: "COLUMN_NAME"  # Update with actual column
        output_key: "source_proteins"
        drop_empty: true
        validate_types: true
        statistics_key: "source_stats"

  # Step 2: Load target data
  - name: load_target_proteins
    action:
      type: LOAD_DATASET_IDENTIFIERS
      params:
        file_path: "${metadata.target_files[0].path}"
        identifier_column: "COLUMN_NAME"  # Update with actual column
        output_key: "target_proteins"
        parse_xrefs: true  # If target has xrefs field
        statistics_key: "target_stats"

  # Step 3: Primary matching
  - name: match_proteins
    action:
      type: MERGE_WITH_UNIPROT_RESOLUTION  # Or appropriate action
      params:
        source_key: "source_proteins"
        target_key: "target_proteins"
        match_column: "uniprot_id"  # Update with bridge column
        output_key: "matched_proteins"
        unmatched_key: "unmatched_proteins"
        statistics_key: "match_stats"

  # Step 4: Calculate metrics
  - name: calculate_overlap
    action:
      type: CALCULATE_SET_OVERLAP
      params:
        dataset1_key: "source_proteins"
        dataset2_key: "matched_proteins"
        identifier_column: "id"
        output_key: "overlap_metrics"

  # Step 5: Export results
  - name: export_matched
    action:
      type: EXPORT_DATASET
      params:
        dataset_key: "matched_proteins"
        output_format: "tsv"
        output_path: "${parameters.output_dir}/${metadata.id}_matched.tsv"
        include_metadata: true

  - name: export_unmatched
    action:
      type: EXPORT_DATASET
      params:
        dataset_key: "unmatched_proteins"
        output_format: "tsv"
        output_path: "${parameters.output_dir}/${metadata.id}_unmatched.tsv"

  - name: export_report
    action:
      type: GENERATE_REPORT
      params:
        statistics_keys: ["source_stats", "target_stats", "match_stats", "overlap_metrics"]
        output_format: "html"
        output_path: "${parameters.output_dir}/${metadata.id}_report.html"