name: UNIPROT_HISTORICAL_RESOLUTION_EXAMPLE
description: |
  Example strategy demonstrating UniProt historical ID resolution.
  
  This strategy shows how to:
  1. Load outdated/historical UniProt IDs
  2. Resolve them to current primary accessions
  3. Compare with a target dataset
  4. Generate statistics on resolution types

steps:
  # Step 1: Load historical UniProt IDs from a source
  - name: LOAD_HISTORICAL_IDS
    action:
      type: LOCAL_ID_CONVERTER
      params:
        mapping_file: "${DATA_DIR}/historical_uniprot_ids.csv"
        source_column: "old_uniprot_id"
        target_column: "old_uniprot_id"  # Identity mapping to load
        output_ontology_type: "PROTEIN_UNIPROTKB_AC_ONTOLOGY"
        output_context_key: "historical_ids"

  # Step 2: Resolve historical IDs to current primary accessions
  - name: RESOLVE_TO_CURRENT
    action:
      type: UNIPROT_HISTORICAL_RESOLVER
      params:
        input_context_key: "historical_ids"
        output_context_key: "current_ids"
        output_ontology_type: "PROTEIN_UNIPROTKB_AC_ONTOLOGY"
        batch_size: 200
        include_obsolete: false
        expand_composites: true

  # Step 3: Load target dataset for comparison
  - name: LOAD_TARGET_PROTEINS
    action:
      type: LOAD_ENDPOINT_IDENTIFIERS
      params:
        endpoint_name: "HPA_OSP_PROTEIN"
        output_context_key: "target_uniprot_ids"

  # Step 4: Analyze overlap between resolved IDs and target
  - name: ANALYZE_RESOLUTION_OVERLAP
    action:
      type: DATASET_OVERLAP_ANALYZER
      params:
        dataset1_context_key: "current_ids"
        dataset2_context_key: "target_uniprot_ids"
        output_context_key: "resolution_overlap"
        dataset1_name: "Resolved_IDs"
        dataset2_name: "Target_Dataset"
        generate_statistics: true

  # Step 5: Generate detailed report
  - name: GENERATE_RESOLUTION_REPORT
    action:
      type: GENERATE_DETAILED_REPORT
      params:
        output_file: "${OUTPUT_DIR}/uniprot_resolution_report.json"
        include_sections:
          - provenance
          - statistics
          - resolution_types

# Alternative usage: Direct resolution during mapping
alternative_steps:
  # Use historical resolver inline during a mapping workflow
  - name: RESOLVE_AND_MAP
    action:
      type: UNIPROT_HISTORICAL_RESOLVER
      params:
        # No input_context_key - uses current_identifiers directly
        output_ontology_type: "PROTEIN_UNIPROTKB_AC_ONTOLOGY"
        batch_size: 100
        
  - name: CONTINUE_MAPPING
    action:
      type: LOCAL_ID_CONVERTER
      params:
        # The resolved IDs are now in current_identifiers
        mapping_file: "${DATA_DIR}/uniprot_to_gene.csv"
        source_column: "uniprot"
        target_column: "gene_symbol"
        output_ontology_type: "GENE_SYMBOL_ONTOLOGY"