name: UKBB_HPA_PROTEIN_OVERLAP_ANALYSIS_OPTIMIZED
description: |
  Optimized strategy that directly compares UKBB and HPA UniProt IDs.
  
  Key improvements:
  - Eliminates unnecessary Assay->UniProt conversion for UKBB data
  - Directly loads UniProt IDs from both datasets
  - Reduces processing steps from 4 to 3 (or 2 if gene conversion not needed)

# Configuration notes:
# - UKBB endpoint has UniProt as primary identifier, so LOAD_ENDPOINT_IDENTIFIERS works perfectly
# - HPA_OSP_PROTEIN endpoint has gene as primary, so we need a workaround
# - The original strategy references "HPA_PROTEIN_DATA" which may be a different endpoint

steps:
  # Step 1: Load UKBB UniProt IDs directly
  - name: LOAD_UKBB_UNIPROT_IDS
    action:
      type: LOAD_ENDPOINT_IDENTIFIERS
      params:
        endpoint_name: "UKBB_PROTEIN"
        output_context_key: "ukbb_raw_uniprot_ids"

  # Step 2: Resolve UKBB historical IDs to current primary accessions
  - name: RESOLVE_UKBB_HISTORICAL_IDS
    action:
      type: UNIPROT_HISTORICAL_RESOLVER
      params:
        input_context_key: "ukbb_raw_uniprot_ids"
        output_context_key: "ukbb_uniprot_ids"
        output_ontology_type: "PROTEIN_UNIPROTKB_AC_ONTOLOGY"
        batch_size: 200
        include_obsolete: false
        expand_composites: true

  # Step 3: Load HPA data and extract UniProt IDs
  # Since HPA's primary is gene, not UniProt, we use a workaround
  - name: EXTRACT_HPA_UNIPROT_IDS
    action:
      type: LOCAL_ID_CONVERTER
      params:
        mapping_file: "/procedure/data/local_data/MAPPING_ONTOLOGIES/isb_osp/hpa_osps.csv"
        source_column: "gene"    # Use gene as source (HPA's primary)
        target_column: "uniprot" # Extract UniProt values
        output_ontology_type: "PROTEIN_UNIPROTKB_AC_ONTOLOGY"
        output_context_key: "hpa_raw_uniprot_ids"
        # By not specifying input_context_key, it will process all rows in the file

  # Step 4: Resolve HPA historical IDs to current primary accessions
  - name: RESOLVE_HPA_HISTORICAL_IDS
    action:
      type: UNIPROT_HISTORICAL_RESOLVER
      params:
        input_context_key: "hpa_raw_uniprot_ids"
        output_context_key: "hpa_uniprot_ids"
        output_ontology_type: "PROTEIN_UNIPROTKB_AC_ONTOLOGY"
        batch_size: 200
        include_obsolete: false

  # Step 5: Analyze UniProt-to-UniProt overlap directly
  - name: ANALYZE_UNIPROT_OVERLAP
    action:
      type: DATASET_OVERLAP_ANALYZER
      params:
        dataset1_context_key: "ukbb_uniprot_ids"
        dataset2_context_key: "hpa_uniprot_ids"
        output_context_key: "overlap_results"
        dataset1_name: "UKBB"
        dataset2_name: "HPA"
        generate_statistics: True

  # Optional Step 6: Convert overlapping UniProt IDs to HPA gene names
  # Only needed if gene names are required for downstream analysis
  - name: CONVERT_TO_GENE_NAMES
    action:
      type: LOCAL_ID_CONVERTER
      params:
        input_context_key: "overlap_results.overlapping_proteins"
        output_context_key: "overlapping_gene_names"
        mapping_file: "/procedure/data/local_data/MAPPING_ONTOLOGIES/isb_osp/hpa_osps.csv"
        source_column: "uniprot"
        target_column: "gene"
        output_ontology_type: "HPA_OSP_PROTEIN_ID_ONTOLOGY"

# Alternative approach if a proper HPA endpoint with UniProt as primary exists:
# Replace step 2 with:
#   - name: LOAD_HPA_UNIPROT_IDS
#     action:
#       type: LOAD_ENDPOINT_IDENTIFIERS
#       params:
#         endpoint_name: "HPA_PROTEIN_DATA"  # If this endpoint exists
#         output_context_key: "hpa_uniprot_ids"